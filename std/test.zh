use vec
use range
use out
use frog

// type Vec
//   int val

// impl Vec
//   fn ctor VecR v
//     out 'copy'
//     Vec slf
//     slf.val = v.val

// fn VecR add VecR v int n
//   v.val = v.val +n
//   <<< v

fn prikol Vec<int>R v
  out sizeof(v)
  v.at(0) = 5

fn prikol_copy Vec<int> v
  out sizeof(v)
  v.at(0) = 2

fn prikol intR t
  t = 4

fn main
  v := Vec<int>(4)
  // v := iota(5 10)
  // n := v.sub(2 5)
  prikol(v)
  prikol_copy(v)
  v.print()
  
  t := 10
  out t
  prikol(t)
  out t
  
  // n.print()

  // v.push_back(54)
  // v.push_back(54)
  // v.push_back(54)
  // v.push_back(54)
  // v.print()
  // n.print()

  // out (&v as int)
  // out (&n as int)
  // @ i v
  //   out (*i)