use vec
use range

impl str
  fn char sub int pos: <<< *((*slf as int + pos) as charP)
  fn ctor
    ptr := malloc(1) as u8P
    *ptr = 0u8
    <<< ptr as str

op 10 bool == char ch str s: <<< ch == s[0]
lop char chr str s: <<< s[0]

type Str
  Vec<char> data
  int size


impl Str
  fn ctor
    Str slf
    slf.data = Vec<char>()
    slf.data.push_back(0u8 as char)
    slf.size = 0
    <<< slf
  fn dtor: slf.data.dtor()
  fn str cstr: it := slf.data.begin(); <<< it.ptr as str
  lop VecIterRange<char> iter StrR s
    <<< VecIterRange<char>(s.data.begin() s.data.begin() + s.size)
  fn charR at int pos: <<< slf.data.at(pos)
  fn charR sub int pos: <<< slf.data.at(pos)
  fn charP atP int pos: <<< slf.data.atP(pos)
  fn push_back char ch
    slf.data.pop_back()
    slf.data.push_back(ch)
    slf.data.push_back(0u8 as char)
    ++slf.size
  fn pop_back
    slf.data.pop_back()
    slf.data.pop_back()
    slf.data.push_back(0u8 as char)
    --slf.size
  // fn sort
  //   slf.data.pop_back()
  //   slf.data.sort()
  //   slf.data.push_back(0u8 as char)
  fn ctor str s
    res := Str()
    res.data.pop_back()
    @ *(s as charP) != 0u8 as char
      res.data.push_back(*(s as charP))
      s = (s as int + 1) as str
    res.data.push_back(0u8 as char)
    res.size = res.data.size - 1
    <<< res
  fn ctor StrR s
    slf := Str()
    slf.data = s.data
    slf.size = s.size
    <<< slf
fn int len str s
  res := 0
  @ *(s as charP) != 0u8 as char
    ++res
    s = (s as int + 1) as str
  <<< res

lop out StrR s: out s.cstr()
lop put StrR s: put s.cstr()

// append
op 16 += StrR a char ch
  a.push_back(ch)
op 16 += StrR a StrR b
  @ i 0..b.size
    ch := 115i8 as char
    ch = b.at(i)
    a += ch
op 16 += StrR a str b
  len := len(b)
  @ i 0..len: 
    a += b[i]
op 6 Str + StrR a StrR b
  s := a
  s += b
  <<< s
op 6 Str + str a str b: <<< Str(a) + Str(b)

rop Out < StrR i: out i
  <<< Out()
lop Out < StrR i: put i, put ' '
  <<< Out()
op 9 Out < Out o StrR i: put i, put ' '
  <<< Out()
  
op 9 bool < StrR a StrR b
  @ i 0..min(a.size b.size)
    ? a[i] < b[i]: <<< tru
    | b[i] < a[i]: <<< fls
  ? a.size < b.size: <<< tru
  | a.size > b.size: <<< fls
  <<< fls

op 5 Str * str s int i
  slf := Str()
  t := Str(s)
  @ j 0..i: slf += t
  <<< slf
  <<< Str()

lop Str $ str s: <<< Str(s)

lop up StrR s
  @ i s: ? *i == chr'a'..=chr'z': *i = *i+chr'A'-chr'a'

lop low StrR s
  @ i s: ? *i == chr'A'..=chr'Z': *i = *i-chr'A'+chr'a'
  
lop VecIterRange<char> iter str s: <<< iter Str(s)