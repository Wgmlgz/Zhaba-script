/**
 * Range type for loops or something
 * example:
 * @ i 2..5: out i
 */

use operators
use util

/** for types only */
type Range T: T begin end

impl Range
  fn T begin: <<< slf.begin
  fn T end: <<< slf.end
  fn ctor T begin T end
    Range<T> slf
    slf.begin = begin
    slf.end = end
    <<< slf

  /**  begin..end */
  op 9 Range<T> .. T begin T end: <<< Range<T>(begin end)
  op 9 Range<T> ..- T begin T end: <<< begin.. -end

  /**  begin.. */
  rop Range<T> .. T begin: <<< begin..(~T())
  /**  ..end */
  lop Range<T> .. T end: <<< (++ ~T())..end
  /**  ..-end */
  lop Range<T> ..- T end: <<< (++ ~T()).. -end
  /**  -begin..end */
  lop Range<T> - Range<T> r: <<< (-r.begin)..r.end


  /**  begin..=end */
  op 9 Range<T> ..= T begin T end: <<< begin..(end+(++ T()))
  /**  ..=end */
  lop Range<T> ..= T end: <<< (++ ~T())..(end+(++ ~T()))
  /**  ..=-end */
  lop Range<T> ..=- T end: <<< (++ ~T())..(-end+(++ ~T()))


  /** T in range */
  op 10 bool == T i Range<T> r
    ? r.begin < r.end: <<< r.begin <= i && i < r.end
    \ <<< r.end <= i && i < r.begin

  lop Range<T> iter Range<T> r: <<< r

fn rangeMaker
  Range<i8> a
  Range<i16> b
  Range<i32> c
  Range<i64> d
  Range<char> e
