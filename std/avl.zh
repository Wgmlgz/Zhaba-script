use vec
use str

type AVLNode T
  int h
  T val
  AVLNode<T>P lhs rhs par

type AVLIter T: AVLNode<T>P next 
type AVLTree T: AVLNode<T>P root
type AVLIterRange T: AVLIter<T> begin end

impl AVLIterRange
  fn AVLIter<T> begin: <<< slf.begin
  fn AVLIter<T> end: <<< slf.end
  fn ctor AVLIter<T> begin AVLIter<T> end
    AVLIterRange<T> slf
    slf.begin = begin
    slf.end = end
    <<< slf

impl AVLNode
  fn ctor TR val
    AVLNode<T> slf
    slf.h = 1
    slf.val = val
    slf.lhs = 0 as AVLNode<T>P
    slf.rhs = 0 as AVLNode<T>P
    slf.par = 0 as AVLNode<T>P
    <<< slf

  lop AVLNode<T>P new AVLNode<T> slf
    ptr := malloc(sizeof(AVLNode<T>)) as AVLNode<T>P
    *ptr = slf
    <<< ptr

  /** bool cast */
  lop bool !! AVLNode<T>P ptr: <<< ptr as int != 0
  lop bool ! AVLNode<T>P ptr: <<< ptr as int == 0

  /** AVL-scecific stuff */
  fn int h
    ? !slf: <<< 0
    \ <<< slf.h
  fn int bf: <<< slf.rhs.h() - slf.lhs.h()
  fn fix: slf.h = 1 + max(slf.rhs.h() slf.lhs.h())

  fn AVLNode<T>P rrot
    tmp := slf.lhs
    slf.lhs = tmp.rhs
    tmp.rhs = slf
    ? !!slf.rhs: slf.rhs.par = slf
    ? !!slf.lhs: slf.lhs.par = slf
    ? !!tmp.rhs: tmp.rhs.par = tmp
    ? !!tmp.lhs: tmp.lhs.par = tmp
    slf.fix() tmp.fix()
    <<< tmp
  fn AVLNode<T>P lrot
    tmp := slf.rhs
    slf.rhs = tmp.lhs
    tmp.lhs = slf
    ? !!slf.rhs: slf.rhs.par = slf
    ? !!slf.lhs: slf.lhs.par = slf
    ? !!tmp.rhs: tmp.rhs.par = tmp
    ? !!tmp.lhs: tmp.lhs.par = tmp
    slf.fix() tmp.fix()
    <<< tmp

  fn AVLNode<T>P balance
    slf.fix()
    ? slf.bf() == 2
      ? slf.rhs.bf() < 0: slf.rhs = slf.rhs.rrot()
      <<< slf.lrot()
    | slf.bf() == -2:
      ? slf.lhs.bf() > 0: slf.lhs = slf.lhs.lrot()
      <<< slf.rrot()
    <<< slf

  fn AVLNode<T>P insert TR val
    ? !slf: <<< new AVLNode<T>(val)
    | val < slf.val:
      t := slf.lhs.insert(val) 
      slf.lhs = t
      t.par = slf
    | slf.val < val:
      t := slf.rhs.insert(val)
      slf.rhs = t
      t.par = slf
    slf = slf.balance()
    slf.par = 0 as AVLNode<T>P
    <<< slf

  fn AVLNode<T>P sub TR val
    ? !slf: <<< 0 as AVLNode<T>P
    ptr := 0 as AVLNode<T>P
    ? val < slf.val: ptr = slf.lhs.sub(val) 
    | slf.val < val: ptr = slf.rhs.sub(val)
    \ <<< slf 
    <<< ptr

  fn show StrR prf
    ? !!slf
      out slf.val, put prf, put '|--'
      p1 := prf p1 += '|  '
      slf.lhs.show(p1)
      put prf, put '\'--'
      p2 := prf p2 += '   '
      slf.rhs.show(p2)
    \ < 'null' <


impl AVLIter
  fn ctor AVLNode<T>P root
    AVLIter<T> slf
    slf.next = root
    <<< slf
  lop TR * AVLIter<T> it: <<< it.next.val
  lop AVLNode<T>P ++ AVLIter<T>R slf
    r := slf.next
    ? !!slf.next.rhs
      slf.next = slf.next.rhs
      @ !!slf.next.lhs
        slf.next = slf.next.lhs
      <<< r
    @ tru
      ? !slf.next.par
        slf.next = 0 as AVLNode<T>P
        <<< r
      ? slf.next.par.lhs == slf.next
        slf.next = slf.next.par
        <<< r
      slf.next = slf.next.par
  op 10 bool != AVLIter<T> a AVLIter<T> b: <<< a.next != b.next
  
impl AVLTree
  /** ctor */
  fn ctor
    AVLTree<T> slf
    slf.root = 0 as AVLNode<T>P
    <<< slf

  /** Iterators */
  fn AVLIter<T> begin
    it := AVLIter<T>(slf.root)
    ? !it.next: <<< it
    @ !!it.next.lhs: it.next = it.next.lhs
    <<< it
  fn AVLIter<T> end
    <<< AVLIter<T>(0 as AVLNode<T>P)
  lop AVLIterRange<T> iter AVLTree<T>R slf
    AVLIterRange<T> it
    it.begin = slf.begin()
    it.end = slf.end()
    <<< it

  /** Inserts element */
  fn insert T val: slf.root = slf.root.insert(val)
  fn TR sub T val: <<< (*slf.root.sub(val)).val
  op 17 += AVLTree<T>R slf T val: slf.root = slf.root.insert(val)

  fn Vec<T> call
    v := Vec<T>()
    @ i, *slf: v += *i
    <<< v

  /** pretty-print */
  fn show: slf.root.show(Str())
