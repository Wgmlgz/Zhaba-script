/**
 * Brainfuck interpreter
 * [pointers, pattern matching]
 */

use std

fn brainfuck Str s
  m := Vec<int>(s.size 0)
  stack := Vec<int>()

  @ i:=0, i<s.size, ++i
    ?? s[i]:
      '[': stack += i
      ']':
        t := stack.pop()
        m[i] = t
        m[t] = i

  p := malloc(3000) as u8P
  
  @ i=0 i<s.size, ++i: ?? s[i]:
    '>': p = p + 1
    '<': p = p - 1
    '+': (*p) += 1u8
    '-': (*p) -= 1u8
    '.': put (*p as char)
    ',': > *(p as charP)
    '[': ? *p == 0u8: i = m[i]
    ']': ? *p != 0u8: i = m[i] - 1

/** Hello world! */
fn main
  brainfuck($`
  ++++++++[>++++[>++>+++>+++>+<<<<-]>+>->+>>
  +[<]<-]>>.>>---.+++++++..+++.>.<<-.>.+++.-
  -----.--------.>+.>++.
  `)
  /** Quite slow but what is here???? */
  /*
  brainfuck($`
  ++++++++[>+>++++<<-]>++>>+<[-[>>+<<-]+>>]>+[-
  <<<[->[+[-]+>++>>>-<<]<[<]>>++++++[<<+++++>>-
  ]+<<++.[-]<<]>.>+[>>]>+]
  `)
  */
  